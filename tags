!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
ASYMPTOTIC_OBJECTS	Makefile	/^ASYMPTOTIC_OBJECTS = asymptotic.o stationary.o Reg_cc.o Reg_ss.o Img_cs.o Img_sc.o Reg_c0.o Img_c0.o Img_ss.o Img_cc.o Reg_s0.o Img_s0.o Reg_sc.o red_gen.o integs.o Expi.o evol.o cp_gen.o mat_file.o hamil.o entropy.o write.o $/;"	m
AVERAGE_OBJECTS	Makefile	/^AVERAGE_OBJECTS = average.o evol.o entropy.o mat_file.o$/;"	m
CC	Makefile	/^CC = gcc-4.9$/;"	m
CFLAGS	Makefile	/^	CFLAGS = -O2 -march=core2 -Wall -ansi -Wpointer-arith -Wcast-qual -Wshadow -Wconversion -Wmissing-prototypes -Wstrict-prototypes -fno-common -Wfloat-equal $/;"	m
CFLAGS	Makefile	/^CFLAGS = -O2 -march=core2 -Wall -ansi -Wpointer-arith -Wcast-qual -Wcast-align -Wshadow -Wconversion -Wmissing-prototypes -Wstrict-prototypes -fno-common -Wnested-externs -Wfloat-equal -fstack-protector -Wstack-protector # -g -W -pedantic -Wwrite-strings  -fshort-enums $/;"	m
CPPFLAGS	Makefile	/^	CPPFLAGS = $(headers_for_intelc)$/;"	m
D	initial.h	/^const double D = 1 ;                           \/* pumping amplitude (GHz) *\/$/;"	v
DATA_FILES	Makefile	/^DATA_FILES = REDFIELD_MATRIX CP_MATRIX RED-EVOLUTION.dat RED-CURRENT.dat RED-ENTROPY.dat CP-EVOLUTION.dat CP-CURRENT.dat CP-ENTROPY.dat INTEGRALS.dat RED-STAT-CURR-T.dat CP-STAT-CURR-T.dat RED-STAT-CURR-O.dat CP-STAT-CURR-O.dat CP_STATIONARY.dat RED_STATIONARY.dat POS_VIOLATIONS CP-ENTROPY-PROD.dat RED-ENTROPY-PROD.dat$/;"	m
EVOL_OBJECTS	Makefile	/^EVOL_OBJECTS = red_evol.o cp_evol.o$/;"	m
J	stationary.c	/^double J ( double w, double oc )$/;"	f
LDLIBS	Makefile	/^	LDLIBS = $(libs_for_intelc)$/;"	m
LDLIBS	Makefile	/^LDLIBS = -lgsl -lgslcblas -lm$/;"	m
MAIN	Makefile	/^	MAIN = main-clang$/;"	m
MAIN	Makefile	/^	MAIN = main-intel$/;"	m
OMEGA	initial.h	/^const double OMEGA = 2 ;                       \/* pumping frequency (GHz) *\/$/;"	v
OMEGAD_OBJECTS	Makefile	/^OMEGAD_OBJECTS = stationary.o current_omegad.o red_gen.o cp_gen.o integs.o Reg_cc.o Reg_ss.o Img_cs.o Img_sc.o Reg_c0.o Img_c0.o Img_ss.o Img_cc.o Reg_s0.o Img_s0.o Reg_sc.o Expi.o$/;"	m
Omega	funcs.h	/^struct f_params { double omega_c ; double beta ; double Omega ;$/;"	m	struct:f_params
POW_2	funcs.h	37;"	d
R	initial.h	/^const double R[] = { 1, 0, 0.5, -0.4 } ;  \/*  initial state with neg. e.p. *\/$/;"	v
SAMPLE_OBJECTS	Makefile	/^SAMPLE_OBJECTS = sample.o r0dot.o polar.o mat_file.o$/;"	m
STEP	initial.h	/^const double STEP = .01 ;                      \/* time step *\/$/;"	v
T	initial.h	/^const double T = .1 ;                        \/* temperature *\/$/;"	v
TDEL_OBJECTS	Makefile	/^TDEL_OBJECTS = stationary.o current_tdel.o red_gen.o cp_gen.o integs.o Reg_cc.o Reg_ss.o Img_cs.o Img_sc.o Reg_c0.o Img_c0.o Img_ss.o Img_cc.o Reg_s0.o Img_s0.o Reg_sc.o Expi.o$/;"	m
VECTOR	funcs.h	38;"	d
WS_SZ	funcs.h	35;"	d
alpha	funcs.h	/^	double omega_1; double alpha; } ;$/;"	m	struct:f_params
alpha	initial.h	/^const double alpha = 5e-3 ;                    \/* coupling strength *\/$/;"	v
assign_p	Reg_cc.c	/^int assign_p ( void* params, double* o_c, double* b, double* O, double* o_1  )$/;"	f
beta	funcs.h	/^struct f_params { double omega_c ; double beta ; double Omega ;$/;"	m	struct:f_params
bloch_vector	polar.c	/^int bloch_vector ( gsl_vector* v, double r, double theta, double phi )$/;"	f
cp_evol	cp_evol.c	/^int cp_evol ( void* params, const double r[], double time_end, double step,$/;"	f
cp_mat	cp_gen.c	/^int cp_mat ( gsl_matrix* cp_mx , void* params )$/;"	f
current_cp_T	current_tdel.c	/^double current_cp_T ( double x, void* params )$/;"	f
current_cp_om	current_omegad.c	/^double current_cp_om ( double x, void* params )$/;"	f
current_red_T	current_tdel.c	/^double current_red_T ( double x, void* params )$/;"	f
current_red_om	current_omegad.c	/^double current_red_om ( double x, void* params )$/;"	f
dist	distance.h	/^double dist ( const gsl_vector* rho1, const gsl_vector* rho2 )$/;"	f
ent_pars	funcs.h	/^struct ent_pars { const gsl_vector* rhoeq ; gsl_matrix* red_m ; } ;$/;"	s
entropy_integ	average.c	/^double entropy_integ ( double t, const gsl_vector* rhoeq, gsl_matrix* red_m )$/;"	f
entropy_of_state	entropy.c	/^double entropy_of_state ( const gsl_vector* rho )$/;"	f
entropy_prod_time	average.c	/^double entropy_prod_time ( double t1, void* pars )$/;"	f
entropy_production	entropy.c	/^double entropy_production ( const gsl_vector* rho, const gsl_vector* rhoeq,$/;"	f
evol	evol.c	/^int evol ( double t, gsl_vector* state, double step,$/;"	f
ex	Expi.c	/^double ex ( double t, void* params )$/;"	f
expi	Expi.c	/^int expi ( double x, double* result, double* abserr )$/;"	f
expi_plus	Expi.c	/^int expi_plus ( double x, double* result, double* abserr )$/;"	f
f_params	funcs.h	/^struct f_params { double omega_c ; double beta ; double Omega ;$/;"	s
first_int	Reg_sc.c	/^int first_int ( double* val, double* error, void* params )$/;"	f
fourth_int	Reg_sc.c	/^int fourth_int ( double* val, double* err, void* params )$/;"	f
fu	Expi.c	/^double fu ( double t, void* params ) $/;"	f
fu_cau	Reg_s0.c	/^double fu_cau ( double k, void* params )$/;"	f
fu_coth	Reg_s0.c	/^double fu_coth ( double k, void* params )$/;"	f
fu_inv	Reg_s0.c	/^double fu_inv ( double k, void* params )$/;"	f
gamma0	initial.h	/^const double gamma0 = 0.05 ;                   \/* energy hopping between sites *\/$/;"	v
generator	evol.c	/^int generator ( double t, const double y[], double dydt[], void* PARS )$/;"	f
ham_gen	hamil.c	/^int ham_gen ( gsl_matrix* h, const double* o )$/;"	f
headers_for_intelc	Makefile	/^headers_for_intelc = -I\/media\/SPACE\/intel\/mkl\/include -I\/media\/SPACE\/intel\/include\/intel64$/;"	m
im_gc0	Img_c0.c	/^int im_gc0 ( void* params, double* val, double* error ) $/;"	f
im_gcc	Img_cc.c	/^int im_gcc ( void* params, double* val, double* error )$/;"	f
im_gcs	Img_cs.c	/^int im_gcs ( void* params, double* val )$/;"	f
im_gs0	Img_s0.c	/^int im_gs0 ( void* params, double* val )$/;"	f
im_gsc	Img_sc.c	/^int im_gsc ( void* params, double* val )$/;"	f
im_gss	Img_ss.c	/^int im_gss ( void* params, double* val, double* error )$/;"	f
integration	integs.c	/^int integration ( void* params, double* integrals )$/;"	f
jac	evol.c	/^int jac ( double t, const double y[], double dfdy[] , double dfdt[], void* PARS )$/;"	f
k_func	Reg_sc.c	/^double k_func ( double k, void* params )$/;"	f
k_func_1	Reg_sc.c	/^double k_func_1 ( double k, void* params )$/;"	f
k_func_2	Reg_sc.c	/^double k_func_2 ( double k , void* params )$/;"	f
k_func_3	Reg_sc.c	/^double k_func_3 ( double k, void* params )$/;"	f
k_func_4	Reg_sc.c	/^double k_func_4 ( double k, void* params )$/;"	f
libs_for_intelc	Makefile	/^libs_for_intelc = -L\/media\/SPACE\/intel\/lib\/intel64 -mkl -lgsl$/;"	m
main	3dposit.c	/^int main ( int argc, char *argv[] )$/;"	f
main	asymptotic.c	/^int main ( int argc, char* argv[] )$/;"	f
main	average.c	/^int main ( int argc, char *argv[] )$/;"	f
main	cp_evol.c	/^int main ( int argc, char *argv[] )$/;"	f
main	current_omegad.c	/^int main ( int argc, char *argv[] )$/;"	f
main	current_tdel.c	/^int main ( int argc, char *argv[] )$/;"	f
main	red_evol.c	/^int main ( int argc, char *argv[] )$/;"	f
main	sample.c	/^int main ( int argc, char *argv[] )$/;"	f
mat_read	mat_file.c	/^int mat_read ( gsl_matrix* mat, char* name )$/;"	f
mat_write	mat_file.c	/^int mat_write ( gsl_matrix* mat, char* name )$/;"	f
max	3dposit.c	/^double max()$/;"	f
omega_1	funcs.h	/^	double omega_1; double alpha; } ;$/;"	m	struct:f_params
omega_c	funcs.h	/^struct f_params { double omega_c ; double beta ; double Omega ;$/;"	m	struct:f_params
omega_c	initial.h	/^const double omega_c = 1000 ;                  \/* critical ohmic frequency *\/$/;"	v
polarization	stationary.c	/^double polarization ( void* params, double oc )$/;"	f
polars	polar.c	/^int polars ( double* r, double* theta, double* phi, const gsl_vector* v )$/;"	f
r0_dot	r0dot.c	/^double r0_dot ( const gsl_matrix* K, const gsl_vector* R )$/;"	f
re_gc0	Reg_c0.c	/^int re_gc0 ( void* params, double* val)$/;"	f
re_gcc	Reg_cc.c	/^int re_gcc ( void* params, double* val )$/;"	f
re_gcs	Reg_sc.c	/^int re_gcs ( double* result, double* error, void* params )$/;"	f
re_gs0	Reg_s0.c	/^int re_gs0 ( void* params, double* val, double* error )$/;"	f
re_gsc	Reg_sc.c	/^int re_gsc ( double* result, double* error, void* params )$/;"	f
re_gss	Reg_ss.c	/^int re_gss ( void* params, double* val )$/;"	f
red_evol	red_evol.c	/^int red_evol ( void* params, const double r[], double time_end, double step,$/;"	f
red_m	funcs.h	/^struct ent_pars { const gsl_vector* rhoeq ; gsl_matrix* red_m ; } ;$/;"	m	struct:ent_pars
red_mat	red_gen.c	/^int red_mat ( gsl_matrix* red_mx , void* params )$/;"	f
rhoeq	funcs.h	/^struct ent_pars { const gsl_vector* rhoeq ; gsl_matrix* red_m ; } ;$/;"	m	struct:ent_pars
sample	sample.c	/^int sample ( const gsl_matrix* M, unsigned int N )$/;"	f
save_integrals	write.c	/^int save_integrals ( void* params )$/;"	f
save_matrices	write.c	/^int save_matrices ( void* params )$/;"	f
second_int	Reg_sc.c	/^int second_int ( double* val, double* error, void* params )$/;"	f
stationary	stationary.c	/^int stationary ( const gsl_matrix* M, gsl_vector* stat_state )$/;"	f
t_end	initial.h	/^const double t_end = 600 ;                     \/* time end *\/$/;"	v
therm_state	distance.h	/^gsl_vector therm_state ( const double beta, const gsl_matrix* H )$/;"	f
third_int	Reg_sc.c	/^int third_int ( double* val, double* err, void* params )$/;"	f
write_cp_curr_O	current_omegad.c	/^int write_cp_curr_O ( void* params )$/;"	f
write_cp_curr_T	current_tdel.c	/^int write_cp_curr_T ( void* params )$/;"	f
write_red_curr_O	current_omegad.c	/^int write_red_curr_O ( void* params )$/;"	f
write_red_curr_T	current_tdel.c	/^int write_red_curr_T ( void* params )$/;"	f
